1. Serwer zapewnia tu us³ugi dla klientow, zg³aszaj¹cych do niego ¿¹dania obs³ugi. Komunikacja nastepuje poprzez nawiazanie polaczenia klienta z serwerem, nastepnie wys³ania ¿¹dania do serwera w okreœlonym formacie i oczekiwanie na odpowiedŸ. Serwer ca³y czas oczekuje na klientow. W momencie otrzymania ¿¹dania przetwarza je i wysy³a odpowiedŸ.
2. Ustalaj¹/ informuj¹ w jaki sposób ma zostaæ wyœwietlona przez przegl¹darkê internetow¹ zawartoœæ wybranego elementu HTML lub XML. Umo¿liwiaj¹ nadanie specjalnych w³aœciwoœci dowolnym znacznikom HTML w dokumencie oraz tworzenie klas z w³aœciwoœciami. Kaskadowoœæ stylów okreœla pierwszeñstwo oddzia³ywania na te same elementy strony stylów z  ró¿nych Ÿróde³.
3.Wykorzystywany najczêœciej w tworzeniu dynamicznych stron internetowych. Zapewnia interaktywnoœæ stron oraz miêdzy innymi obs³ugê zdarzeñ, walidacjê formularzy. JS wykorzystywany takze do tworzenia gier przegl¹darkowych ( Framework Phaser), do budowania aplikacji (Angular, React), ale takze do backendu dziêki Node.js
4. Jedna z najpopularniejszych bibliotek JavaScript. Jest szybka, ma³a i bogata w funkcje. Pozwala zastosowaæ na stronie proste efekty wizualne jak i funkcjonalne rozwi¹zania np: responsywny slider, lista rozwijana.
5.Model-View-Controller to wzorzec którego za³o¿eniem jest podzielenie kodu aplikacji na Model reprezentuj¹cy dane, widok reprezentujacy interfejs u¿ytkownika oraz kontroler czyli logikê steruj¹c¹ aplikacj¹.
6.Model zapewnia zunifikowany sposób dostêpu do danych. Najczêœciej stosowany jest do pobierania i przygotowania rekordów z bazy danych. Dziêki temu reszta aplikacji staje siê niezale¿na od tego sk¹d i w jaki sposób pobierane s¹ dane.|||| Z czego siê sk³ada, co w nim umieszczamy? ||||
7.Kontroler jest podstawow¹ jednostk¹ logiczn¹ naszego programu. Odpowiada m.in. za przetwarzanie danych pobranych za pomoc¹ modelu i przekazanie ich u¿ytkownikowi oraz zapisanie danych przez niego podanych (poprzez widok). W kontrolerze odbywaj¹ siê wszystkie konieczne obliczenia i podejmowane s¹ odpowiednie akcje w zale¿noœci od dzia³añ u¿ytkownika. |||| Z czego siê sk³ada, co w nim umieszczamy? ||||
8.Widok reprezentuje to co widzi u¿ytkownik. Widok oddzielony od logiki pozwala na bezinwazyjn¹ zmianê grafiki w dowolnym momencie.
9. Razor to sk³adnia znaczników umo¿liwiaj¹ca osadzanie kodu opartego na platformie . NET na stronach internetowych. Platforma Razor Pages jest preferowanym sposobem tworzenia aplikacji opartych na stronach lub formularzach w ASP.NET Core.
10. NIE WIEM CO TO S¥ adnotacje do danych w modelu.
11.Sterowanie dostêpem do akcji, odbywa siê poprzez autoryzacjê konkretnych ról b¹dŸ u¿ytkowników, do wyœwietlania uprzednio zdefiniowanych widoków.Istotne jest dodanie atrybutu [Authorize] przed klas¹ kontrolera. Autoryzacjê przydzielamy konkretnym osobom b¹dŸ rolom poprzez atrybuty jak: [AllowAnonymous] public IActionResult TylkoAnon(){ return View();} [Authorize(Roles="Admini,Kierownictwo")] public IActionResult TylkoWazni(){ return View();} 
12.Umo¿liwienie u¿ytkownikowi wprowadzenia kodu skryptowego, który bêdzie bez zmian przes³any do przegl¹darki innego u¿ytkownika. Jedn¹ z mo¿liwoœci zabezpieczenia siê jest enkodowanie HTML ca³ej zawartoœci.
13.Wykonanie kodu z uprawnieniami innego internauty.Atak polegajacy na zmuszeniu przegl¹darki ofiary do wykonania pewnej nieautoryzowanej akcji (wykonania requestu HTTP). Zabezpieczenia na tego typu ataki stosuje sie poprzez generowanie page-tokenów b¹dŸ per-session tokenów antiCSRF i sprawdzanie ich poprawnosci poprzez strone obslugujaca formularz. Form¹ zabezpieczeñ jest zakaz dostêpu do cookies z poziomu js.
14.Wykradniêcie ciasteczek pozwala na próbe podszycia siê pod legalnego u¿ytkownika, któremu pierwotnie wydano plik cookie, i uzyskaæ dostêp do us³ug internetowych bez wyzwania logowania. Ciasteczka mog¹ tak¿e przechowywaæ preferencje które uznawane mog¹ byæ za dane wra¿liwe.
15. Najczêsciej wystêpuje przy pytaniu uzytkownika o wprowadzanie danych jak nickname/userId a przekazane jest polecenie SQL które nieœwiadomie jest uruchamiane w naszej bazie danych.
16. Widok layout definiuje najwy¿szego poziomu wzór dla widoków aplikacji. Wszystkie typowe struktury HTML jak skrypty i style które s¹ powtarzalne w wielu stronach moga byæ zdefiniowane w pliku Layout do którego bêd¹ siê odwo³ywaæ  dowolne widoki w aplikacji. Layout redukuje iloœæ kodu który by siê powtarza³.
17. Selektory: * - selektor uniwersalny (kazdy element na stronie)|| #x - hash sign (elementy o id "x")|| .x - selektor klasy, nadaje styl grupie elementow|| x - selektor typu (np a { color:red;} )|| X[title] selektor atrybutu wybierze tylko element z atrybutem title
18.Code First - podejœcie projektowe, w którym zaczynamy pracê od napisania kodu a nie oparcia aplikacji na istniej¹cej ju¿ bazie danych|| Database first - Korzystaj¹c z mechanizmu in¿ynierii wstecznej tworzymy klasy encji i kontekstu na podstawie istniej¹cego schematu bazy danych.
19. Programista nie zawraca sobiê g³owy tym co siê dzieje w tle. Spora iloœæ operacji jest wykonywana bez naszej ingerencji. ORM oferuje mo¿liwoœæ pracy z baz¹ danych nawet gdy programista nie jest wyspecjalizowany przy pracy z SQL. Bardzo dobrze wspó³pracuje z CRUD. Sprawia ¿e kod jest ³atwiejszy do utrzymania i aktualizacji.  Zwiêksza odpornoœæ na ataki SQL injection.
20 MS entity framwork pozwala na: Wykonywanie podstawowych operacji CRUD.£atwe zarz¹dzanie relacjami 1-1, 1-? oraz ?-?. Tworzenie relacji dziedziczenia pomiêdzy encjami. || Umo¿liwia deweloperom pracê z danymi w postaci obiektów i w³aœciwoœci specyficznych dla domeny, takich jak klienci i adresy klientów, bez koniecznoœci samodzielnej pracy z bazowymi tabelami i kolumnami bazy danych -- (to takie bardzo wikipediowe)
>>>>>>> 437b44eae8dd6daee38bbbf0f5f79cbbc64fb030
